## API Endpoints

**GET** `/v1/objects/properties/:propertyName`

To get an idea what values each property described above can have and also to have a dynamic source to look it up there is a dedicated endpoint to explore the data. All results of your query are sorted by the chosen property in ascending order.

**Example:**

`GET /v1/objects/properties/rarity` yields:

    [
        "Champion",
        "Common",
        "Epic",
        "Legendary",
        "Non-Collectible",
        "Promo",
        "Rare",
        "Uncommon"
    ]

### POST `/v1/objects/search`

This one lets you search for objects by specifying various parameters.
Below you can find a list of all searchable properties and examples. Each example shows which payload was `POST`ed to `<version>/objects/search` and the resulting JSON response. Depending on the data type of the property you can specify more or less complex queries. All results of your search are sorted by the name of the object in ascending order.

##### Strings
`name` and `sub_type` are searched for by looking for objects whose `name`/`sub_type` contain the value you provide. Those searches are case-insensitive while the rest are just simple lookups.

* `name`
* `sub_type`
* `faction`
* `rarity`
* `set_number`

##### Integers
These properties support a wider variety of searches. You can either search for exact values (like all objects with `atk` = 10) but also specify value ranges. Ranges can be specified with an object containing one or more of ***lt*** (less than), ***gt*** (greather than), ***lte*** (less than equal) or ***get*** (greater than equal). The wider operand will be used, which means if you specify ***lte*** AND ***lt***, ***lte*** will be used.

* `atk`
* `health`
* `cost`
* `socket_count`

**Examples:**

All objects with `atk` of 10

    {
        "atk": 10
    }

All objects with `cost` between 3-6 and `atk` of 5

    {
        "cost": {
            "lte": 6,
            "gte": 3
        },
        "atk": 5
    }

##### Arrays

* `type`
* `color`
* `threshold`


**Examples:**

All objects that are **Artifacts** and **Troops**

    {
        "type": ["Artifact", "Troop"] // these are case-sensitive but ["Troop", "Artifact"] works too
    }

All objects with thresholds: Wild 1, Ruby 1

    {
        "threshold": [{
            "shard": "Wild", // same here, these array elements can be sorted differently
            "quantity": 1
        }, {
            "shard": "Ruby",
            "quantity": 1
        }]
    }
